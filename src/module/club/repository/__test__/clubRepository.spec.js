const { Equipo } = require("../../entities/club")
const IdNotFoundError = require("../errors/idNotFoundError")
const InvalidIdError = require("../errors/invalidIdError")
const ClubRepository = require("../sqlite/clubRepository")
const UndefinedError = require("../errors/undefinedError")
const ClubModel = require("../../model/clubModel")
const AreaModel = require("../../../area/model/areaModel")
const { Sequelize } = require("sequelize")

const sequelizeInstance = new Sequelize("sqlite::memory")
let repository
beforeAll(() => {
    const club = ClubModel.setup(sequelizeInstance)
    const area = AreaModel.setup(sequelizeInstance)
    club.belongsTo(area)

    repository = new ClubRepository(club, area)
})

beforeEach(async(done) => {
    await sequelizeInstance.sync({force: true})
    done()
})

const exampleTeam = new Equipo({
    Area: undefined,
    nombre: 'Arsenal FC',
    abreviatura: 'BHA',
    estadio: 'Emirates Stadium',
    direccion: 'segurola y habana',
    anoFundacion: '1889',
    telefono: '+44 (01202) 726300',
    website: 'estudiantesdelaplata.com',
    area_id: 35,
    fotoEscudo: '/uploads/919137607bcc57f2e39369c03933ecbb'
})
test("guardar un nuevo equipo genera un nuevo id", async() => {
    const autogenerated_id = 1
    const savedTeam = await repository.saveNewTeam(exampleTeam)
    expect(savedTeam.id).toEqual(autogenerated_id)

})
test("llamar a saveNewTeam sin un equipo da error", async() => {
    let teamToSave
    try{
        teamToSave = await repository.saveNewTeam()
    } catch(e){
        expect(e).toBeInstanceOf(UndefinedError)
    }
    expect(teamToSave).toBeUndefined()
})
test("editar un equipo cambia los valores actuales", async() => {
    
    let team = await repository.saveNewTeam(exampleTeam)

    expect(team.id).toEqual(1)

    team.nombre = "Estudiantes LP"

    const editedTeam = await repository.saveEditedTeam(team)

    expect(editedTeam.id).toEqual(1)
    expect(editedTeam.nombre).toEqual("Estudiantes LP")
})
test("llamar a saveEditedTeam sin un equipo da error", async() => {
    let teamToEdit 
    try {
        teamToEdit = await repository.saveEditedTeam()
    } catch (e) {
        expect(e).toBeInstanceOf(UndefinedError)
    }
    expect(teamToEdit).toBeUndefined()
})
test("llamar a getById con un ID invalido da error", async() => {
    const invalidId = "3"
    try{
        await repository.getById(invalidId)
    } catch(e){
        expect(e).toBeInstanceOf(InvalidIdError)
    }
})
test("llamar a getById correctamente devuelve un equipo", async() => {
    const savedTeam = await repository.saveNewTeam(exampleTeam)
    const teamToFind = await repository.getById(1)
    // arreglar // arreglar // arreglar // arreglar 
    // arreglar // arreglar // arreglar // arreglar 
    // arreglar // arreglar // arreglar // arreglar 
})
test("getById no encuentra un equipo con el ID introducido ", async() => {
    let team 
    try{
        team = await repository.getById(12345678)
    } catch(e){
        expect(e).toBeInstanceOf(IdNotFoundError)
    }
    expect(team).toBeUndefined()
})
test("llama a delete sin introducir un ID da un error", async() => {
    try{
        await repository.delete()
    } catch(e){
        expect(e).toBeInstanceOf(UndefinedError)
    }
})
test("llama a delete correctamente", async () => {

    const savedTeam = await repository.saveNewTeam(exampleTeam)

    expect(savedTeam.id).toBe(1)

    const deleteTeam = await repository.delete(1)

    expect(deleteTeam).toBe(true)
})
test("getAll devuelve false si la lista esta vacia", async() => {
    const teamList = await repository.getAll()
    expect(teamList).toBe(false)
})